// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FRA_Todolist_prj.Models.Contexts.Services
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateAndManageTo_DoListFeature : object, Xunit.IClassFixture<CreateAndManageTo_DoListFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TodoGherkins.feature"
#line hidden
        
        public CreateAndManageTo_DoListFeature(CreateAndManageTo_DoListFeature.FixtureData fixtureData, FRA_Todolist_prj_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Models/Contexts/Services", "Create and Manage To-Do List", "  As a software developer\r\n  I want to create, retrieve, update, and delete tasks" +
                    "\r\n  So that I can manage my development work efficiently", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully create a To-Do List")]
        [Xunit.TraitAttribute("FeatureTitle", "Create and Manage To-Do List")]
        [Xunit.TraitAttribute("Description", "Successfully create a To-Do List")]
        [Xunit.TraitAttribute("Category", "happy")]
        public void SuccessfullyCreateATo_DoList()
        {
            string[] tagsOfScenario = new string[] {
                    "happy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully create a To-Do List", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
  testRunner.Given("I create a To-Do List with valid title \"Fix Login Bug\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
  testRunner.And("with valid description \"Investigate and fix login issue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
  testRunner.And("the valid item status is set to default \"Pending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
  testRunner.When("I send a POST request with valid data to Create To Do API \"api/todo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
  testRunner.Then("the http status code response with valid data for creating an item should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
  testRunner.And("the http status response with valid data for creating an item should be SUCCESS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
  testRunner.And("the http message response with valid data for creating an item should be \"ITEM CR" +
                        "EATED SUCCESSFULLY.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully retrieve all To-Do items")]
        [Xunit.TraitAttribute("FeatureTitle", "Create and Manage To-Do List")]
        [Xunit.TraitAttribute("Description", "Successfully retrieve all To-Do items")]
        [Xunit.TraitAttribute("Category", "happy")]
        public void SuccessfullyRetrieveAllTo_DoItems()
        {
            string[] tagsOfScenario = new string[] {
                    "happy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully retrieve all To-Do items", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
  testRunner.Given("I have atleast one record of a To-Do item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
  testRunner.When("I send a GET request with valid data to Retrieve All To Do API \"api/todo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
  testRunner.Then("the http status code response with valid data for retrieving all items should be " +
                        "200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
  testRunner.And("the http status response with valid data for retrieving all items should be SUCCE" +
                        "SS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
  testRunner.And("the http message response with valid data for retrieving for all items should be " +
                        "\"Retrieved items.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully retrieve a To-Do item by Id")]
        [Xunit.TraitAttribute("FeatureTitle", "Create and Manage To-Do List")]
        [Xunit.TraitAttribute("Description", "Successfully retrieve a To-Do item by Id")]
        [Xunit.TraitAttribute("Category", "happy")]
        public void SuccessfullyRetrieveATo_DoItemById()
        {
            string[] tagsOfScenario = new string[] {
                    "happy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully retrieve a To-Do item by Id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 33
  testRunner.Given("I have a To-Do item with valid id \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
  testRunner.When("I send a GET request with valid data to Retrieve To Do Item by Id API \"api/todo/1" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
  testRunner.Then("the http status code response with valid data for retrieving the item should be 2" +
                        "00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
  testRunner.And("the http status response with valid data for retrieving the item should be SUCCES" +
                        "S", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
  testRunner.And("the http message response with valid data for retrieving the item should be \"Retr" +
                        "ieved item.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully update a To-Do item by Id")]
        [Xunit.TraitAttribute("FeatureTitle", "Create and Manage To-Do List")]
        [Xunit.TraitAttribute("Description", "Successfully update a To-Do item by Id")]
        [Xunit.TraitAttribute("Category", "happy")]
        public void SuccessfullyUpdateATo_DoItemById()
        {
            string[] tagsOfScenario = new string[] {
                    "happy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully update a To-Do item by Id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
  testRunner.Given("I want to update a record with valid id \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
  testRunner.And("I want to update the valid title to \"Fix Registration Bug\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
  testRunner.And("I want to update the description with valid data to \"Investigate and fix registra" +
                        "tion issue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
  testRunner.When("I send a PUT request with valid data to Update To Do Item by Id API \"api/todo/1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
  testRunner.Then("the http status code response with valid data for updating the item should be 200" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
  testRunner.And("the http status response with valid data for updating the item should be SUCCESS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
  testRunner.And("the http message response with valid data for updating the item should be \"ITEM U" +
                        "PDATED SUCCESSFULLY.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully delete a To-Do item by Id")]
        [Xunit.TraitAttribute("FeatureTitle", "Create and Manage To-Do List")]
        [Xunit.TraitAttribute("Description", "Successfully delete a To-Do item by Id")]
        [Xunit.TraitAttribute("Category", "happy")]
        public void SuccessfullyDeleteATo_DoItemById()
        {
            string[] tagsOfScenario = new string[] {
                    "happy"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully delete a To-Do item by Id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
  testRunner.Given("I want to delete a record with valid id \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
  testRunner.When("I send a DELETE request with valid data to Delete To Do Item by Id API \"api/todo/" +
                        "1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
  testRunner.Then("the http status code response with valid data for deleting the item should be 200" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
  testRunner.And("the http status response with valid data for deleting the item should be SUCCESS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
  testRunner.And("the http message response with valid data for deleting the item should be \"ITEM D" +
                        "ELETED SUCCESSFULLY.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Failed to create a To-Do List")]
        [Xunit.TraitAttribute("FeatureTitle", "Create and Manage To-Do List")]
        [Xunit.TraitAttribute("Description", "Failed to create a To-Do List")]
        [Xunit.TraitAttribute("Category", "negative")]
        public void FailedToCreateATo_DoList()
        {
            string[] tagsOfScenario = new string[] {
                    "negative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failed to create a To-Do List", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
  testRunner.Given("I create a To-Do List with title \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
  testRunner.And("with description \"Investigate and fix login issue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
  testRunner.And("with item status is set to default \"Pending\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
  testRunner.When("I send a POST request to Create To Do API \"api/todo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
  testRunner.Then("the http status code response for creating an item should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
  testRunner.And("the http status response for creating an item should be FAIL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
  testRunner.And("the http message response for creating an item should be \"Not found or Invalid it" +
                        "em data.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Failed to retrieve all To-Do items")]
        [Xunit.TraitAttribute("FeatureTitle", "Create and Manage To-Do List")]
        [Xunit.TraitAttribute("Description", "Failed to retrieve all To-Do items")]
        [Xunit.TraitAttribute("Category", "negative")]
        public void FailedToRetrieveAllTo_DoItems()
        {
            string[] tagsOfScenario = new string[] {
                    "negative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failed to retrieve all To-Do items", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
  testRunner.Given("I have no records of To-Do items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 79
  testRunner.When("I send a GET request to Retrieve All To Do API \"api/todo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
  testRunner.Then("the http status code response for retrieving all items should be 500", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
  testRunner.And("the http status response for retrieving all items should be FAIL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
  testRunner.And("the http message response for retrieving all items should be \"An error occurred w" +
                        "hile retrieving items.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Failed to retrieve a To-Do item by Id with invalid data")]
        [Xunit.TraitAttribute("FeatureTitle", "Create and Manage To-Do List")]
        [Xunit.TraitAttribute("Description", "Failed to retrieve a To-Do item by Id with invalid data")]
        [Xunit.TraitAttribute("Category", "negative")]
        public void FailedToRetrieveATo_DoItemByIdWithInvalidData()
        {
            string[] tagsOfScenario = new string[] {
                    "negative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failed to retrieve a To-Do item by Id with invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
  testRunner.Given("I have no To-Do item with id \"999\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
  testRunner.When("I send a GET request to Retrieve To Do Item by Id API \"api/todo/999\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
  testRunner.Then("the http status code response for retrieving the item should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
  testRunner.And("the http status response for retrieving the item should be FAIL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
  testRunner.And("the http message response for retrieving the item should be \"Not found or Invalid" +
                        " item data.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Failed to update a To-Do item by Id with invalid data")]
        [Xunit.TraitAttribute("FeatureTitle", "Create and Manage To-Do List")]
        [Xunit.TraitAttribute("Description", "Failed to update a To-Do item by Id with invalid data")]
        [Xunit.TraitAttribute("Category", "negative")]
        public void FailedToUpdateATo_DoItemByIdWithInvalidData()
        {
            string[] tagsOfScenario = new string[] {
                    "negative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failed to update a To-Do item by Id with invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 96
  testRunner.Given("I want to update a record with id \"999\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
  testRunner.And("I want to update the title to \"Invalid Title\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
  testRunner.And("I want to update the description to \"Valid Description\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
  testRunner.When("I send a PUT request to Update To Do Item by Id API \"api/todo/999\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
  testRunner.Then("the http status code response for updating the item should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
  testRunner.And("the http status response for updating the item should be FAIL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
  testRunner.And("the http message response for updating the item should be \"Not found or Invalid i" +
                        "tem data.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Failed to delete a To-Do item by Id")]
        [Xunit.TraitAttribute("FeatureTitle", "Create and Manage To-Do List")]
        [Xunit.TraitAttribute("Description", "Failed to delete a To-Do item by Id")]
        [Xunit.TraitAttribute("Category", "negative")]
        public void FailedToDeleteATo_DoItemById()
        {
            string[] tagsOfScenario = new string[] {
                    "negative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failed to delete a To-Do item by Id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 107
  testRunner.Given("I want to delete a record with id \"999\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
  testRunner.When("I send a DELETE request to Delete To Do Item by Id API \"api/todo/999\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
  testRunner.Then("the http status code response for deleting the item should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
  testRunner.And("the http status response for updating the item should be FAIL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
  testRunner.And("the http message response for updating the item should be \"Not found or Invalid i" +
                        "tem data.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreateAndManageTo_DoListFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreateAndManageTo_DoListFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
