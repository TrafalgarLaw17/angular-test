  Determining projects to restore...
  All projects are up-to-date for restore.
  SpecFlowFeatureFiles: Models\Contexts\Services\TodoGherkins.feature
  -> Using specflow.json
  SpecFlowGeneratedFiles: Models\Contexts\Services\TodoGherkins.feature.cs
C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\Models\Contexts\DBContext.cs(10,32): warning CS0108: 'DBContext.GetConnection()' hides inherited member 'BaseContext.GetConnection()'. Use the new keyword if hiding was intended. [C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\FRA_Todolist_prj.csproj]
C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\Models\Contexts\Services\BasicAuth.cs(22,13): warning CS0618: 'ISystemClock' is obsolete: 'Use TimeProvider instead.' [C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\FRA_Todolist_prj.csproj]
C:\Users\franz\.nuget\packages\microsoft.net.test.sdk\17.13.0\build\netcoreapp3.1\Microsoft.NET.Test.Sdk.Program.cs(4,41): warning CS7022: The entry point of the program is global code; ignoring 'AutoGeneratedProgram.Main(string[])' entry point. [C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\FRA_Todolist_prj.csproj]
C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\Models\Contexts\Services\BasicAuth.cs(26,11): warning CS0618: 'AuthenticationHandler<AuthenticationSchemeOptions>.AuthenticationHandler(IOptionsMonitor<AuthenticationSchemeOptions>, ILoggerFactory, UrlEncoder, ISystemClock)' is obsolete: 'ISystemClock is obsolete, use TimeProvider on AuthenticationSchemeOptions instead.' [C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\FRA_Todolist_prj.csproj]
C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\Models\Request\Todo.cs(23,23): warning CS8618: Non-nullable property 'TodoTitle' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the property as nullable. [C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\FRA_Todolist_prj.csproj]
C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\Models\Contexts\Services\BasicAuth.cs(33,59): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\FRA_Todolist_prj.csproj]
C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\Models\Contexts\TodoContext.cs(91,49): warning CS8601: Possible null reference assignment. [C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\FRA_Todolist_prj.csproj]
C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\Models\Contexts\TodoContext.cs(93,73): warning CS8604: Possible null reference argument for parameter 'value' in 'TaskStatus Enum.Parse<TaskStatus>(string value)'. [C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\FRA_Todolist_prj.csproj]
C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\Models\Contexts\TodoContext.cs(138,45): warning CS8601: Possible null reference assignment. [C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\FRA_Todolist_prj.csproj]
C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\Models\Contexts\TodoContext.cs(140,69): warning CS8604: Possible null reference argument for parameter 'value' in 'TaskStatus Enum.Parse<TaskStatus>(string value)'. [C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\FRA_Todolist_prj.csproj]
  FRA_Todolist_prj -> C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\bin\Debug\net8.0\FRA_Todolist_prj.dll
Test run for C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\bin\Debug\net8.0\FRA_Todolist_prj.dll (.NETCoreApp,Version=v8.0)
VSTest version 17.12.0 (x64)

Starting test execution, please wait...
A total of 1 test files matched the specified pattern.
C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\bin\Debug\net8.0\FRA_Todolist_prj.dll
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.0.2+dd36e86129 (64-bit .NET 8.0.12)
[xUnit.net 00:00:00.35]   Discovering: FRA_Todolist_prj
[xUnit.net 00:00:00.39]   Discovered:  FRA_Todolist_prj
[xUnit.net 00:00:00.41]   Starting:    FRA_Todolist_prj
-> Loading plugin C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\bin\Debug\net8.0\TechTalk.SpecFlow.xUnit.SpecFlowPlugin.dll
-> Loading plugin C:\Users\franz\source\repos\NETCoreProjects\GitHub\fra-todo-list\bin\Debug\net8.0\FRA_Todolist_prj.dll
-> Using specflow.json
==================== TODOLIST RETRIEVE (by Id)  - Happy Path
Given I have a To-Do item with valid id "1": PASSED
When I send a GET request with valid data to Retrieve To Do Item by Id API "api/todo/1": PASSED
Then the http status code response with valid data for retrieving the item should be OK: PASSED
And the http status response with valid data for retrieving the item should be SUCCESS: PASSED
And the http message response with valid data for retrieving the item should be "Retrieved item.": PASSED
==================== END
==================== TODOLIST UPDATE (by Id - Happy Path)
Given I want to update a record with id "1": PASSED
Given I want to update the valid title to "Fix Registration Bug": PASSED
And I want to update the description with valid data to "Investigate and fix registration issue": PASSED
When I send a PUT request with valid data to Update To Do Item by Id API "api/todo/1": PASSED
Then the http status code response with valid data for updating the item should be OK: PASSED
And the http status response with valid data for updating the item should be SUCCESS: PASSED
And the http message response with valid data for updating the item should be "ITEM UPDATED SUCCESSFULLY.": PASSED
==================== END
==================== TODOLIST CREATE - Happy Path
Given I create a To-Do List with valid title "Fix Login Bug": PASSED
And with valid description "Investigate and fix login issue": PASSED
And the item status is set to default "Pending": PASSED
When I send a POST request with valid data to Create To Do API "api/todo": PASSED
Then the http status code response with valid data for creating an item should be Created: PASSED
And the http status response with valid data for creating an item should be SUCCESS: PASSED
And the http message response with valid data for creating an item should be "ITEM CREATED SUCCESSFULLY.": PASSED
==================== END
==================== TODOLIST RETRIEVE (all) - Happy Path
Given I have atleast one record of a To-Do item: PASSED
When I send a GET request with valid data to Retrieve All To Do API "api/todo": PASSED
Then the http status code response with valid data for retrieving all items should be OK: PASSED
And the http status response with valid data for retrieving all items should be SUCCESS: PASSED
And the http message response with valid data for retrieving for all items should be "Retrieved items.": PASSED
==================== END
==================== TODOLIST DELETE (by Id) - Happy Path
Given I want to delete a record with valid id "1": PASSED
When I send a DELETE request with valid data to Delete To Do Item by Id API "api/todo/1": PASSED
Then the http status code response with valid data for deleting the item should be OK: PASSED
And the http status response with valid data for deleting the item should be SUCCESS: PASSED
And the http message response with valid data for deleting the item should be "ITEM DELETED SUCCESSFULLY.": PASSED
==================== END
[xUnit.net 00:00:00.59]   Finished:    FRA_Todolist_prj
  Passed Successfully retrieve a To-Do item by Id [27 ms]
  Standard Output Messages:
 Given I have a To-Do item with valid id "1"
 -> done: TodoTest.RetrieveGivenIHaveAValidToDoItemWithId("1") (0.0s)
 When I send a GET request with valid data to Retrieve To Do Item by Id API "api/todo/1"
 -> done: TodoTest.RetrieveWhenISendAValidGetRequestToRetrieveToDoItemByIdAPI("api/todo/1") (0.0s)
 Then the http status code response with valid data for retrieving the item should be 200
 -> done: TodoTest.RetrieveThenTheValidHttpStatusCodeResponseForItemShouldBe(OK) (0.0s)
 And the http status response with valid data for retrieving the item should be SUCCESS
 -> done: TodoTest.RetrieveThenTheValidHttpStatusResponseForItemShouldBeSUCCESS() (0.0s)
 And the http message response with valid data for retrieving the item should be "Retrieved item."
 -> done: TodoTest.RetrieveThenTheValidHttpMessageResponseForItemShouldBe("Retrieved item.") (0.0s)


  Passed Successfully update a To-Do item by Id [3 ms]
  Standard Output Messages:
 Given I want to update a record with valid id "1"
 -> done: TodoTest.UpdateGivenIWantToUpdateWithValidId("1") (0.0s)
 And I want to update the valid title to "Fix Registration Bug"
 -> done: TodoTest.UpdateGivenIWantToUpdateTheValidTitleTo("Fix Registration Bug") (0.0s)
 And I want to update the description with valid data to "Investigate and fix registration issue"
 -> done: TodoTest.UpdateGivenIWantToUpdateTheValidDescriptionTo("Investigate and f...") (0.0s)
 When I send a PUT request with valid data to Update To Do Item by Id API "api/todo/1"
 -> done: TodoTest.UpdateWhenISendAValidPutRequestToUpdateToDoItemByIdAPI("api/todo/1") (0.0s)
 Then the http status code response with valid data for updating the item should be 200
 -> done: TodoTest.UpdateThenTheValidHttpStatusCodeResponseForUpdatingItemShouldBe(OK) (0.0s)
 And the http status response with valid data for updating the item should be SUCCESS
 -> done: TodoTest.UpdateThenTheValidHttpStatusResponseForUpdatingItemShouldBeSUCCESS() (0.0s)
 And the http message response with valid data for updating the item should be "ITEM UPDATED SUCCESSFULLY."
 -> done: TodoTest.UpdateThenTheValidHttpMessageResponseForUpdatingItemShouldBe("ITEM UPDATED SUCC...") (0.0s)


  Passed Successfully create a To-Do List [2 ms]
  Standard Output Messages:
 Given I create a To-Do List with valid title "Fix Login Bug"
 -> done: TodoTest.CreateGivenICreateAToDoListWithValidTitle("Fix Login Bug") (0.0s)
 And with valid description "Investigate and fix login issue"
 -> done: TodoTest.CreateGivenValidDescription("Investigate and f...") (0.0s)
 And the valid item status is set to default "Pending"
 -> done: TodoTest.CreateGivenTheValidItemStatusIsSetToDefault("Pending") (0.0s)
 When I send a POST request with valid data to Create To Do API "api/todo"
 -> done: TodoTest.CreateWhenISendAValidPOSTRequestToCreateToDoAPI("api/todo") (0.0s)
 Then the http status code response with valid data for creating an item should be 201
 -> done: TodoTest.CreateThenTheValidHttpStatusCodeResponseShouldBe(Created) (0.0s)
 And the http status response with valid data for creating an item should be SUCCESS
 -> done: TodoTest.CreateThenTheValidHttpStatusResponseShouldBeSUCCESS() (0.0s)
 And the http message response with valid data for creating an item should be "ITEM CREATED SUCCESSFULLY."
 -> done: TodoTest.CreateThenTheValidHttpMessageResponseShouldBe("ITEM CREATED SUCC...") (0.0s)


  Passed Successfully retrieve all To-Do items [1 ms]
  Standard Output Messages:
 Given I have atleast one record of a To-Do item
 -> done: TodoTest.RetrieveGivenIHaveValidToDoItem() (0.0s)
 When I send a GET request with valid data to Retrieve All To Do API "api/todo"
 -> done: TodoTest.RetrieveWhenISendAValidGetRequestToRetrieveAllToDoAPI("api/todo") (0.0s)
 Then the http status code response with valid data for retrieving all items should be 200
 -> done: TodoTest.RetrieveThenTheValidHttpStatusCodeResponseShouldBe(OK) (0.0s)
 And the http status response with valid data for retrieving all items should be SUCCESS
 -> done: TodoTest.RetrieveThenTheValidHttpStatusResponseShouldBeSUCCESS() (0.0s)
 And the http message response with valid data for retrieving for all items should be "Retrieved items."
 -> done: TodoTest.RetrieveThenTheValidHttpMessageResponseShouldBe("Retrieved items.") (0.0s)


  Passed Successfully delete a To-Do item by Id [1 ms]
  Standard Output Messages:
 Given I want to delete a record with valid id "1"
 -> done: TodoTest.DeleteGivenIWantToDeleteWithValidTitle("1") (0.0s)
 When I send a DELETE request with valid data to Delete To Do Item by Id API "api/todo/1"
 -> done: TodoTest.DeleteWhenISendAValidDeleteRequestToDeleteToDoItemByIdAPI("api/todo/1") (0.0s)
 Then the http status code response with valid data for deleting the item should be 200
 -> done: TodoTest.DeleteThenTheValidHttpStatusCodeResponseForDeletingItemShouldBe(OK) (0.0s)
 And the http status response with valid data for deleting the item should be SUCCESS
 -> done: TodoTest.DeleteThenTheValidHttpStatusResponseForDeletingItemShouldBeSUCCESS() (0.0s)
 And the http message response with valid data for deleting the item should be "ITEM DELETED SUCCESSFULLY."
 -> done: TodoTest.DeleteThenTheValidHttpMessageResponseForDeletingItemShouldBe("ITEM DELETED SUCC...") (0.0s)



Test Run Successful.
Total tests: 5
     Passed: 5
 Total time: 1.1362 Seconds

Workload updates are available. Run `dotnet workload list` for more information.
